/*
 * ImageViewer.java
 *
 * Created on 7 de Agosto de 2008, 19:34
 */

package uepg.rneurais;

/**
 *
 * @author  jcarlos
 */


import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.image.Raster;
import java.awt.image.BufferedImage;
import javax.media.jai.PlanarImage;



public class ImageViewer extends JFrame implements MouseListener {

    PlanarImage imageRegion;


    /** Creates new form ImageViewer */
    public ImageViewer() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:

    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:

    }//GEN-LAST:event_formMouseDragged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageViewer().setVisible(true);
            }
        });
    }
    
    
    public void setImage(PlanarImage img) {
        this.image = img;
        // Get the JFrame’s ContentPane.
        Container contentPane = this.getContentPane();
        contentPane.setLayout(new BorderLayout());
        // Create an instance of DisplayJAI.
        dj = new DisplayJAIE(image);
        // Add to the JFrame’s ContentPane an instance of JScrollPane
        // containing the DisplayJAI instance.
        JScrollPane jsPane = new JScrollPane(dj);
        jsPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jsPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jsPane.setEnabled(true);
        contentPane.add(jsPane,BorderLayout.CENTER);
        dj.addMouseListener(this);        
    }
    
    
 public void mouseClicked(MouseEvent e) {
 
 }

 public void mouseEntered(MouseEvent e) {
 
 }
 
 public void mouseExited(MouseEvent e) {
     int x = e.getX();
     int y = e.getY();
     xb = x;
     yb = y;
     if (dj!=null) {
         Raster r = (Raster) dj.getRegion(xa, ya, xb, yb);
         r.getDataBuffer();
         BufferedImage buff;
         buff = new BufferedImage(r.getWidth(),r.getHeight(), BufferedImage.TYPE_INT_RGB);        
         buff.setData(r);
         this.imageRegion = PlanarImage.wrapRenderedImage(buff);



         ImageViewer aux = new ImageViewer();
         aux.setImage(imageRegion);
         aux.setVisible(true);


         

     }
     
 }

 public void mousePressed(MouseEvent e) {
     int x = e.getX();
     int y = e.getY();

     xa = x;
     ya = y;
     
     
 }

 public void mouseReleased(MouseEvent e) {
     
 }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    PlanarImage image = null;
    DisplayJAIE dj;

    int xa = -1;
    int ya = -1;
    
    int xb = -1;
    int yb = -1;    
    
    
}
